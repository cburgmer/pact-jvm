buildscript {
  dependencies {
    classpath 'au.com.dius.pact.provider:gradle:4.5.8'
  }
}

plugins {
  id 'au.com.dius.pact.kotlin-common-conventions'
}

if (System.env.PACT_PUBLISH == 'true') {
  apply plugin: 'au.com.dius.pact'
}

dependencies {
  testImplementation project(':core:pactbroker')
  testImplementation 'org.apache.groovy:groovy'
  testImplementation 'org.apache.groovy:groovy-json'
  testImplementation(project(':consumer:groovy')) {
    transitive = false
  }
  testImplementation(project(':consumer'))
  testImplementation('io.pact.plugin.driver:core') {
    exclude group: 'au.com.dius.pact.core'
  }
  testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
  testRuntimeOnly 'ch.qos.logback:logback-classic'
}

def gitBranch() {
  def branch = ""
  def proc = "git rev-parse --abbrev-ref HEAD".execute()
  proc.in.eachLine { line -> branch = line }
  proc.err.eachLine { line -> println line }
  proc.waitFor()
  branch
}

if (System.env.PACT_PUBLISH == 'true') {
  pact {
    publish {
      pactBrokerUrl = 'https://pact-foundation.pactflow.io'
      if (project.hasProperty('pactBrokerToken')) {
        pactBrokerToken = project.pactBrokerToken
      }
      consumerBranch = gitBranch()
      excludes = ['JVM Pact Broker Client-Imaginary Pact Broker']
    }
  }
}
